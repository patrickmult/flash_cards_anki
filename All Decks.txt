help	:h &lt;term&gt;<br />
delete	d
i	insert&lt;esc&gt;
OCW	operator count motion
I	text @ start of line
w	forward one word
b	back one word
:q!	force quite w/o confirm
yy	yank line (copy)
a	append text after cursor
6l	forward 6 letters
p	paste below cursor
P	paste above cursor
:w	write file (save)
:wq!	write + quite /w override confirmation
u	undo
ctrl+R	redo
cw	change word (cut and replace)
3cw	change 3 words
o	insert blank line below and go into insert mode
fN	move to the next instance of N
:set syntax=	set syntax to whatever want
jump to the third N	3fN
"search for ""2.2.8"""	/2.2.8 &lt;enter&gt;
replace	r&lt;letter&gt;
search again	n
search previous	N
search and replace	:%s/&lt;searchterm&gt;/&lt;replaceterm&gt;/&lt;modifiers&gt;ie g=search all occurances c=ask for confirmation each match
go to line 12	12G
go to top of file	gg
go to end of file	G
change VIMs working directory	:cd &lt;path&gt;
check working directory	:pwd
open a file	:e &lt;filename&gt;
:e .	view working directory
V	visual linewise mode
v	visual single mode
y	yank (copy)
d	delete (cut)
c	change (cut, then activate insert)
.	repeats your last command
pwd	print working directory
hostname	display computer's network name
mkdir	make directory
cd	change directory
ls	list directory
rmdir	remove directory
pushd &lt;directory&gt;	go to directory and push it on stack
popd	go to last directory pushed onto stack by pushd
cp	copy a file or directory
mv	move a file or directory
less (filename)	page through a file in terminal (w is up, spacebar is down, q to quit)
cat	print the whole file
xargs	execute arguments
find	find files
grep	find things inside files
man	read a manual page
apropos	find what man page is appropriate
env	look at your environment
echo	print some arguments
export	export/set a new environment variable
exit	exit the shell
sudo	execute as super user root
chmod	change permission modifiers
chown	change ownership
ctrl+z	suspend application
fg(1-9)	resume application
rails new	makes a new rails app
bundle install	install dependencies in rails app
rails server	starts the rails server
rails generate controller &lt;&gt;	generate a controller
delete line	dd
$	move to end of line
0	move to beginning of line
forward one word	w
backward one word	b
ZZ	save and quit
1,50 w temp	write lines 1 to 50 in file named temp
x	delete character
dw	delete word from cursor on
db	delete word backward
dd	delete line
d$	delete to end of line
d^	delete to beginning of line
y$	yank to end of line from cursor
yw	yank from cursor to end of word
5yy	yank 5 lines
2p	paste from buffer 2 (there are 9)
U	restore line
J	join next line down to the end of current line
:w file	"write to file named ""file"""
:e file	start editing a new file
:r file	read the contents fo a file to the workspace
ctrl+1	page break (insert mode only)
n(command)	do command (n) times
repeat last command	.
r	replace one character at the cursor position
R	begin overstrike or replace mode (insert)
/term	search for term
?term	search backwards for term
n	used after search to repeat search
touch (filename)	touch a file (also creates a new one if none present)
!!	executes last command
.to_f	Converts leading characters in a string as a floating point number.<div><br /></div><div>Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of the str, 0.0 is returned. This method never raises an exception.</div>
x,y,z = ARGV	ARGV holds arguments passed to the Ruby script when it is run.
File.close	closes a file
File.read	reads the contents of a file. can assign to var
BEGIN	"Run this block when the script starts.<div>BEGIN { puts ""hi"" }</div>"
File.truncate	empties the file. (beware)
File.write('stuff')	"writes ""stuff"" into the file"
"echo -e ""input text"" &gt; or &gt;&gt; ""filename"""	echo's input text to append(&gt;) or overwrite(&gt;&gt;) to filename.<div>-e enables \ escape sequences</div>
(command)?	see the help file for that command
quit out of help file	:q
String.split(' ')	split a string into an array
Array.sort	sort an array
Array.shift	moves the first word from an array to a var
Array.pop	pops the last word off an array and saves it to a var
:set paste :set nopaste	disable auto indent before pasting, reenable after
Array.push	push things to an array
Array.each	do a block for each item in an array
(0..5).each do |i|	does 5 iterations&nbsp;
for i in 'array' ; puts i; end	(for loop) goes through each item in 'array' and returns i
'var'.each do |i|; puts i; end	returns i for each item in the array
END	"Run this block when the script is done.<div>END { puts ""hi"" }</div>"
alias	Create another name for a function.<div>alias X Y</div>
begin	Start a block, usually for exceptions.<div>begin; do; until i=somevalue</div>
break	Break out of a loop<div>while true; break; end</div>
case	Case style conditional, like an if.<div>case X; when Y; else; end</div>
class	Define a new class.<div>class X; end</div>
def	Define a new function.<div>def foo(); end</div>
defined?	Checks if a class/var/fun is defined<div>defined? foo</div>
elsif	Else if conditional.<div>Notice there is NO E.</div>
ensure	run a bit of code regardless of errors (yikes)
for	For loop syntax.<div>for x in y; do; end</div>
module	define a new module<div>A module is a collection of methods and constants.</div>
next	Skip to the next element of a .each iterator<div>(0..5).each {|y| next }</div>
redo	Rerun a code block exactly the same.<div>(0..5).each {|i| redo if i &gt; 2}</div>
rescue	Run this code if an exception happens.
retry	In a rescue clause, says to try the block again
self	The current object, class, or module.
super	The parent class of this class.
then	Can be used with if optionally.<div>if true then puts hi; end</div>
undef X	remove a function definition from a class
unless	"inverse of if<div>unless false then puts ""not""; end</div>"
until	inverse of while block
when	part of case conditionals<div>case x; when y; else; end</div>
while	while loop
yield	pause and transfer control to the code block
data types	true, false, nil, strings, numbers, floats, arrays, hashes
\\	backslash string escape
\'	single quote string escape
"\"""	double quote
\a	Bell
\b	Backspace
\f	Formfeed
\n	Newline
\r	Carriage
\t	Tab
\v	Vertical tab
**	Power of operator
::	Colon access<div>Module::Class</div>
.	Dot access (method access)
&lt;=&gt;	Comparison operator
..	Range inclusive<div>(0..3).to_a == [0,1,2,3]</div>
range non-inclusive	(1...3).to_a == [2]
@	Object scrope
@@	Class scope
$	Global scope
pushd (directory)	go to directory and add it to the popd stack
e	go to end of word<div>ea - go to end of word and append</div>
"Array[x..y].join("" "")"	x..y range optional. Print out and join the array with the contents of the join argument
Tell git who you are	"<div>git config --global user.name ""Sam Smith""</div><div>git config --global user.email y@x.com</div>"
git init	create a new repo in current working directory
git clone /path/to/repo OR username@host:/path/to/repo	clone a get repo into your current working directory
git add (filename) or --all	add a file name or all files to the next commit
"git commit -m ""Commit message"""	commit the added files /w message
git push origin master	save changes on master branch to your origin repo (usaully github)
git status	list status of current files to be commited or visa versa
git remote add origin (server)	add a server as the origin, replace origin /w something else to add another remote location
git remote -v	list all currently configured remote repositories
git checkout -b (branchname)	create a new branch and switch to it
git checkout (branchname)	siwtch from one branch to another
git branch	list all branches in your repo and displays current working branch
git branch -d (branchname)	delete the selected branch
git push origin (branchname)	push a selected branch to your remote repo
git push --all origin	push all branches to origin
git push origin :(branchname)	delete a branch on your remote repo
git pull	fetch and merge changes on the remote server to your working directory
git merge (branchname)	to merge a different branch into your active branch
git diff	view all merge conflicts
git diff --base (filename)	view the conflicts against the branch file
git diff (sourcebranch) (targetbranch)	preview the changes, before merging between selected branches
git tag 1.0.0 (commitID)	you can use tagging to mark a significant changeset such as a release
git log	shows the log of commits for the repo
git push --tags origin	push all tags to the remote repository
git checkout -- (filename)	undoes local changes and rolls back to the last content in head(??? lookup later)<div>changes already added to the index, as well as new files, will be kept</div>
git fetch origin<div>git reset --hard origin/master</div>	to drop all local changes and commits and fetch the latest history from the server and point your local master branch at it
"git grep ""foo()"""	search the working directory for foo()
